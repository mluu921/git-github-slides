---
format: revealjs
---

```{r}
library(tidyverse)
library(knitr)
```

# A Brief Introduction to Git and Github {background-image="https://images.unsplash.com/photo-1618401479427-c8ef9465fbe1?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1686&q=80" background-color="black"}

| Michael Luu

`r format(Sys.Date(), '%B %d, %Y')`

# 

![](https://uidaholib.github.io/get-git/images/phd101212s.gif){fig-align="center"}

## What is git?

> Git is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows.[^1]

[^1]: Wikipedia

![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Git-logo.svg/768px-Git-logo.svg.png?20160811101906){width="200" fig-align="center"}

## What is GitHub?

> GitHub, Inc. is an Internet hosting service for software development and version control using Git. It provides the distributed version control of Git plus access control, bug tracking, software feature requests, task management, continuous integration, and wikis for every project.[^2]

[^2]: Wikipedia

![](https://github.githubassets.com/images/modules/open_graph/github-octocat.png){width="400" fig-align="center"}

#

![](https://andersenlab.org/dry-guide/2022-03-09/img/git_v_github.png){fig-align="center"}

## Reproducible Research {.smaller}

-   **Scientific validity:** If scientific findings cannot be replicated, it is difficult to determine if the original results were valid or if they were the result of chance or other factors.

-   **Translation to clinical practice:** If scientific findings cannot be replicated, it is difficult to determine if the results are reliable enough to be used in clinical practice.

-   **Time and resource savings:** If scientific findings are reproducible, researchers can build on previous work with greater confidence, reducing the need to repeat experiments and analyses.

-   **Trust and credibility:** If scientific findings are not reproducible, it can erode trust in the scientific community and lead to skepticism about scientific findings.

::: {.notes}

Reproducible research in biomedical research refers to the ability to reproduce or replicate scientific findings using the same data, methods, and analysis as the original study. In biomedical research, reproducibility is critical as it is essential for ensuring the accuracy and reliability of scientific findings. 

To ensure reproducibility in biomedical research, researchers need to use appropriate methods and analysis, provide detailed documentation of their work, and make their data and analysis code available for others to review and replicate. This can be facilitated by using tools such as Git and GitHub, which provide version control and collaboration features that make it easier to share and reproduce research results.

:::

# 

![](https://imgs.xkcd.com/comics/git.png){fig-align="center"}

## Important Git Jargon {.smaller}

-   **Repo (Repository)** - A repo or repository is generally a folder in which git manages and tracks the files that are contained within.

-   **Staging** - This is a 'holding area' of the files that you would like to version control. We need to 'stage' a file before we can 'commit' it.

-   **Commit** - A commit is a 'snapshot' of current changes among the files that have been 'staged' in your repository. A commit also requires a small message or text description, in which you can describe the changes.

-   **Branching & Merging** - Git allows for a non-linear workflow, in which we can 'branch' away from the current source. With Git we can create infinite number of  branches in which we can experiment without affecting the main source code. If content, we can merge those changes from various branches back to the main source.

-   **Push & Pull** - If git is configured to work with Github (or another remote repository), **push** allows us to push the changes to a remote repository (Github), and **pull** allows us to pull in the changes from Github

#

![](https://www.nobledesktop.com/image/blog/git-branches-merge.png){fig-align="center"}

# 

![](http://www.phdcomics.com/comics/archive/phd031214s.gif){fig-align="center"}

## Why you should use it? {.smaller}

-   git provides a highly structured workflow that promotes reproducibility and transparency

-   git provides a continuous log of the changes you have done on your project / analysis (via **Commit Messages**)

-   git provides the ability to travel through time with the files in your project - easily jump back to previous versions of files (via **Commits**)

-   git provides the freedom to explore new ideas/analysis without the fear of affecting your primary analysis (via **Branching**)

## Why you should use it? {.smaller}

-   Github provides a remote backup of your git **repository**

-   Github provides a highly structured method of sharing your **repository** with other collaborators

-   Github provides you with an online presence (think of this as an online portfolio of your work)

-   Github provides you with a free online hosting / website for your project

-   Git and Github is a industry standard version control system - this skill is transferable to many industries

## 

![](images/github-luu-michael.png){fig-align="center"}

# However...

## git is complicated

-   git is designed as a command line tool (e.g. to take full advantage of git, you will have to learn commands to enter in the terminal)

-   There is a barrier to entry on getting your local git repository to 'talk' with Github

-   There are a GUI (graphical user interface) to Git such as **Github Desktop** and git integration (**rstudio**) that remedies some of these barriers

## git is complicated 

-   Although git can version control any type of files, it is best used in conjunction with text files (e.g. source code)

-   Although possible, It is not recommended to use git in conjunction with large databases as it can slow it down significantly

## git is complicated

-   There's additional work to consider in your current workflow
    -   Storing your project into a "project folder"
    -   Making the folder a git **repository**
    -   Making commits at logical points in time to snapshot your project
    -   Writing **commit** messages to describe the changes
    -   **Pushing** your work to Github

## Github Desktop

![](images/github-desktop.png){fig-align="center"}

## Rstudio Git Integration

![](images/rstudio-git.png){fig-align="center"}

# Live Demo

